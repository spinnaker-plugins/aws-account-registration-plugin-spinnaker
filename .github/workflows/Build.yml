name: Build

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ 'feature/integration-testing' ]

jobs:
  build:
    runs-on: ubuntu-18.04
    name: test and build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run unit tests
        run: ./gradlew cleanTest test
      - name: Build with Gradle
        run: ./gradlew releaseBundle
      - name: Get zip path
        id: zip_path
        run: |
          a=$(find build/distributions/ -name '*.zip' -printf "%f")
          echo "::set-output name=zip_path::$a"
      - name: Upload bundle
        uses: actions/upload-artifact@v2
        with:
          name: bundle
          path: build/distributions/*.zip
          if-no-files-found: error
    outputs:
      zip_path: ${{ steps.zip_path.outputs.zip_path }}
#   test:
#     runs-on: ubuntu-latest
#     needs: build
#     name: integration test
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions/download-artifact@v2
#         with:
#           name: bundle
#           path: plugins
#       - name: Run clouddriver
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
#         run: |
#           docker run --user=root -d --network=host --mount type=bind,src="$(pwd)"/.github/integration-testing/config,target=/opt/spinnaker/config \
#           --mount type=bind,src="$(pwd)"/plugins,target=/opt/clouddriver/plugins -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
#           -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} gcr.io/spinnaker-marketplace/clouddriver:spinnaker-1.22.0
#       - name: Prepare mock server
#         run: |
#           wget -q https://golang.org/dl/go1.15.1.linux-amd64.tar.gz -O go.tar.gz
#           sudo tar -C /usr/local -xzf go.tar.gz
#           echo "::set-env name=PATH::$PATH:/usr/local/go/bin"
# #          sudo apt update && sudo apt install netcat curl wget jq -y
#       - name: Run mock server
#         working-directory: .github/integration-testing/mock-server
#         timeout-minutes: 5
#         run: |
#           go run server.go &
#           echo "Waiting for server on 8080..."
#           while ! nc -z localhost 8080; do
#             sleep 3
#           done
#           sleep 3
#       - name: Check mock server
#         run: |
#           curl -s localhost:8080/hello | jq -e '.SpinnakerAccounts[] | select(.SpinnakerAccountName == "account-3")'
#           sleep 30
#           curl -s localhost:7002/credentials | jq -e '.[] | select(.name == "default")'
#       - name: Ensure external account loaded
#         run: |
#           curl -s localhost:7002/credentials | jq -e '.[] | select(.name == "account-3")'
#       - name: Test removal functionality
#         working-directory: .github/integration-testing/mock-server
#         run: |
#           curl -s localhost:7002/credentials | jq -e '.[] | select(.name == "account-3-ecs")'
#           cp response-remove-ecs.json response.json
#           sleep 15
#           count=$(curl -s localhost:7002/credentials | jq '.[] | select(.name == "account-3-ecs") | [{name}] | length')
#           if ! [[ -z $count ]]; then echo "account-3-ecs not removed." && exit 1; fi
#           curl -s localhost:7002/credentials | jq -e '.[] | select(.name == "account-3")'
#           cp response-remove.json response.json
#           sleep 15
#           count=$(curl -s localhost:7002/credentials | jq '.[] | select(.name == "account-3") | [{name}] | length')
#           if ! [[ -z $count ]]; then echo "account-3 not removed." && exit 1; fi
#           curl -s localhost:7002/credentials | jq -e '.[] | select(.name == "default")'
#           cp response-remove-default.json response.json
#           sleep 15
#           count=$(curl -s localhost:7002/credentials | jq '.[] | select(.name == "default") | [{name}] | length')
#           if ! [[ -z $count ]]; then echo "default not removed." && exit 1; fi



